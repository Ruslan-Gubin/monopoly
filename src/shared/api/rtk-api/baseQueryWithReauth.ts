import { type FetchBaseQueryMeta } from '@reduxjs/toolkit/dist/query/fetchBaseQuery'
import {
  type FetchArgs,
  type FetchBaseQueryError,
} from '@reduxjs/toolkit/query'
import {
  type BaseQueryApi,
  type QueryReturnValue,
} from '@reduxjs/toolkit/src/query/baseQueryTypes'
import { baseQuery } from './baseQuery'
import { invalidateAccessToken } from './invalidateTokenEvent'

const AUTH_ERROR_CODES = new Set([401])

export async function baseQueryWithReauth(
  args: string | FetchArgs,
  api: BaseQueryApi,
  extraOptions: {}
): Promise<QueryReturnValue<unknown, FetchBaseQueryError, FetchBaseQueryMeta>> {
  const result = await baseQuery(args, api, extraOptions)
  

 /**
* üëá –í–ù–ò–ú–ê–ù–ò–ï: –ú—ã –Ω–µ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫–æ–π-–ª–∏–±–æ –∑–≤—É–∫ –≤ –ø—Ä—è–º–æ–º —Ä–µ–∂–∏–º–µ,
* –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ FSD:
*
* api.dispatch(logoutThunk()) // üëé
*
* * –ò—Ç–∞–∫, –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–µ–µ —Å–æ–±—ã—Ç–∏–µ `invalidateAccessToken`,
* –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ redux –Ω–∞ –¥—Ä—É–≥–∏—Ö —É—Ä–æ–≤–Ω—è—Ö.
* –°–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –≤ @/features/authentication/InvalidateAccessToken
*/
  if (
    typeof result.error?.status === 'number' &&
    result.error &&
    AUTH_ERROR_CODES.has(result.error.status)
  ) {
    api.dispatch(invalidateAccessToken())
  }

  return result
}